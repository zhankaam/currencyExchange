{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","components/CurrencyExchangeSelectors.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","selectAll","state","CurrencyEContainer","dispatch","_useDispatch","ac","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","Lesson1","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72aa1b1e.chunk.js","sourcesContent":["import {useDispatch as _useDispatch} from \"react-redux\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n    payload : {\r\n        amountOfBYN: string,\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n   return {\r\n       type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n       payload: {\r\n           amountOfBYN,\r\n           amountOfCurrency\r\n       }\r\n   }\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: {isBuying: boolean}\r\n};\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: {isBuying}\r\n    }\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload: {currentCurrency: string}\r\n};\r\n\r\n\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: {currentCurrency}\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;\r\n\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch()\r\n    return (ac: CurrencyReducersTypes) => dispatch(ac)\r\n\r\n}","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import {IGlobalState} from \"../redux/state\";\r\n\r\ninterface IRootState extends IGlobalState {};\r\n\r\nexport const selectCurrencies = (state: IRootState) => state.currency.currencies;\r\nexport const selectCurrentCurrency = (state: IRootState) => state.currency.currentCurrency;\r\nexport const selectIsBuying = (state: IRootState) => state.currency.isBuying;\r\nexport const selectAmountOfBYN = (state: IRootState) => state.currency.amountOfBYN\r\nexport const selectAmountOfCurrency = (state: IRootState) => state.currency.amountOfCurrency;\r\n\r\n\r\nexport const selectAll = (state: IRootState) => state.currency","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\n//import { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport { CurrencyType } from '../../redux/currencyReducer';\r\n// import { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes,\r\n    useDispatch\r\n} from '../../redux/actions';\r\n//import {connect, ConnectedProps, useSelector} from 'react-redux';\r\nimport { useSelector} from 'react-redux';\r\nimport {\r\n    selectAll,\r\n    selectAmountOfBYN,\r\n    selectAmountOfCurrency,\r\n    selectCurrencies,\r\n    selectCurrentCurrency,\r\n    selectIsBuying\r\n} from \"../../components/CurrencyExchangeSelectors\";\r\n\r\n//const CurrencyEContainer: React.FC<TProps> = props => {\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n   /* const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        setCurrencyAmount,\r\n        setAction,\r\n        changeCurrency,\r\n    } = props;*/\r\n\r\n    /*const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        ChangeCurrencyFieldAC,\r\n        ChangeActionAC,\r\n        ChangeCurrentCurrencyAC\r\n    } = props;*/\r\n\r\n    /*const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency\r\n    } = props;*/\r\n\r\n    const dispatch = useDispatch()\r\n    /*const currencies = useSelector(selectCurrencies)\r\n    const currentCurrency = useSelector(selectCurrentCurrency)\r\n    const isBuying = useSelector(selectIsBuying)\r\n    const amountOfBYN = useSelector(selectAmountOfBYN)\r\n    const amountOfCurrency = useSelector(selectAmountOfCurrency)*/\r\n\r\n    const {currencies,currentCurrency,isBuying,amountOfBYN,amountOfCurrency } = useSelector(selectAll);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                 //   setCurrencyAmount(value, value);\r\n                   // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value))\r\n                } else {\r\n                  /*  setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));*/\r\n                 //   ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch( ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)))\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                  //  setCurrencyAmount(value, value);\r\n                  //  ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value))\r\n                } else {\r\n                   /* setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);*/\r\n                  //  ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value))\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n      //  e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n     //  e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false))\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n      //  e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n       // e.currentTarget.dataset.currency && ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n/*const mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n    return {\r\n        currencies: currency.currencies,\r\n        currentCurrency: currency.currentCurrency,\r\n        isBuying: currency.isBuying,\r\n        amountOfBYN: currency.amountOfBYN,\r\n        amountOfCurrency: currency.amountOfCurrency,\r\n    };\r\n};*/\r\n\r\n\r\n/*const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>)  => {\r\n    return {\r\n        setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n            dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n        },\r\n        setAction(isBuying: boolean) {\r\n            dispatch(ChangeActionAC(isBuying));\r\n        },\r\n        changeCurrency(currency: string) {\r\n            dispatch(ChangeCurrentCurrencyAC(currency));\r\n        },\r\n    };\r\n};*/\r\n\r\n\r\n//const connector = connect(mapStateToProps, {ChangeCurrencyFieldAC,ChangeActionAC,ChangeCurrentCurrencyAC});\r\n\r\n/*const connector = connect(mapStateToProps, { });\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(CurrencyEContainer);*/\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","import React from 'react';\r\nimport CurrencyExchangeContainer from '../containers/CurrencyExchangeContainer/CurrencyEContainer'\r\n\r\n\r\nconst Lesson1: React.FunctionComponent = () => {\r\n    return (\r\n    <React.Fragment>\r\n        <CurrencyExchangeContainer />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Lesson1;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from \"./lesson1/lesson1\";\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Lesson1 />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE: {\r\n            return {\r\n                    ...state,\r\n                    ...action.payload\r\n            }\r\n        }\r\n            case ACTIONS_TYPE.CHANGE_CHANGE_ACTION: {\r\n                return {\r\n                    ...state,\r\n                    ...action.payload,\r\n                    amountOfBYN: '',\r\n                    amountOfCurrency: '',\r\n                }\r\n            }\r\n            case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY: {\r\n                return {\r\n                     ...state,\r\n                     ...action.payload,\r\n                    amountOfBYN: '',\r\n                    amountOfCurrency: '',\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}